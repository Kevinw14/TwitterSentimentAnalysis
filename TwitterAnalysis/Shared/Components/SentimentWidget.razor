<div class="select-none flex flex-col w-full bg-white">
    <div class="m-5">
        <h1 class="text-dusty-green uppercase">Sentiment</h1>
        <div class="flex-grow flex items-center">
            <div class="basis-1/3">
                <div class="flex justify-between">
                    <div class="flex items-center w-2/3 text-lg">
                        <i class="text-[#4BC0C0] fa-regular fa-circle mr-3"></i><p>Positive</p>
                    </div>
                    <p>@Sentiment.PositivePercentage%</p>
                </div>
                <div class="flex justify-between">
                    <div class="flex items-center w-2/3 text-lg">
                        <i class="text-[#FFCD56] fa-regular fa-circle mr-3"></i><p>Neutral</p>
                    </div>
                    <p>@Sentiment.NeutralPercentage%</p>
                </div>
                <div class="flex justify-between">
                    <div class="flex items-center w-2/3 text-lg">
                        <i class="text-[#FF6384] fa-regular fa-circle mr-3"></i><p>Negative</p>
                    </div>
                    <p class="">@Sentiment.NegativePercentage%</p>
                </div>

            </div>
            <div class="flex-grow">
                <Chart Config="Sentiment.Config" @ref="Sentiment.Chart"></Chart>
            </div>
        </div>
        <p class="text-gray-400">@Sentiment.Processed% processed</p>
    </div>
</div>

@code {
    [Parameter]
    public Sentiment Sentiment { get; set; }
    [Parameter]
    public EventCallback<Sentiment> SentimentChanged { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SentimentChanged.InvokeAsync(Sentiment);
        }
    }

    protected override void OnInitialized()
    {

        PieConfig Config = new PieConfig()
        {
            Options = new PieOptions
            {
                Responsive = true,
                CutoutPercentage = 70,
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Title"
                },
                Legend = new Legend
                {
                    Display = false
                }
            }
        };

        foreach (string color in new[] { "Negative", "Neutral", "Positive" })
        {
            Config.Data.Labels.Add(color);
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] { 0, 0, 0 })
        {
            BackgroundColor = new[]
            {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
        }
        };

        Config.Data.Datasets.Add(dataset);
        Sentiment = new Sentiment(Config);
    }
}
